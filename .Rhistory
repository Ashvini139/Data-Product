browesURL "Project_part_1.html"
dir()
browseURL "Project_part_1.html"
dir()
browesURL "Project_part_1.html"
dir()
browesURL "Project1.html"
browesURL "Project1.html"
browesURL "Project1.html"
browesURL "project1.html"
browesURL "project1.html"
browesURL "project1.html
q()
"'"
q()
library(manipulate) myHist <- function(mu){  hist(galton$child,col="blue",breaks=100)  lines(c(mu, mu), c(0, 150),col="red",lwd=5)  mse <- mean((galton$child - mu)^2)  text(63, 150, paste("mu = ", mu))  text(63, 140, paste("MSE = ", round(mse, 2))) } manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("UsingR")
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)  text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2))) }
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist<-function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
library(UsingR)
data(galton)
head(galton)
library(manipulate)
myHist<-function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
hist(galton$child,col="blue",breaks=100)
meanChild<-mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
plot(galton$parent,galton$child,pch=19,col="blue")
myPlot<-function(beta){
y<-galton$child-mean(galton$child)
x<-galton$parent-mean(galton$parent)
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myPlot(beta),beta=slider(0.6,1.2,step=0.02))
y<-galton$child
x<-galton$parent
beta1<-cor(y,x)* sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))
beta1<-cor(y,x)* sd(x)/sd(y)
beta0<-mean(x)-beta1*mean(y)
rbind(c(beta0,beta1),coef(lm(x~y)))
rbind(c(beta0,beta1),coef(lm(x~y)))
text(63,150,paste("mu=",mu))
#Regression Models - Course Project
##Executive summary
We are working on data for Motor Trend, a magazine about the automobile industry. Looking at a data set of a collection of cars, we are interested in exploring the relationship between a set of variables and miles per gallon (MPG) (outcome). Need to answer the following two questions:
* Is an automatic or manual transmission better for MPG
* Quantify the MPG difference between automatic and manual transmissions
Using hypothesis testing and simple linear regression, we determine that there is a signficant difference between the mean MPG for automatic and manual transmission cars, with the latter having 7.245 more MPGs on average. However, in order to adjust for other confounding variables such as the weight and horsepower of the car, we ran a multivariate regression to get a better estimate the impact of transmission type on MPG. After validating the model using ANOVA, the results from the multivariate regression reveal that, on average, manual transmission cars get 2.084 miles per gallon more than automatic transmission cars
###Data Loading and Processing
First, we load dataset MTCARS, in R base package.
```{r,echo=TRUE}
library(datasets)
data(mtcars)
```
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
pickXY(my_data)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})      }
)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
library(miniUI)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
install.packages("manipulate")
install.packages("rattle")
install.packages("rattle")
set.seed(12345)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(training$classe, p=0.6, list=FALSE)
install.packages("RGtk2")
install.packages("rattle")
install.packages("RGtk2")
knitr::opts_chunk$set(echo = TRUE)
install.packages("leaflet")
# to install the development version from Github, run
# devtools::install_github("rstudio/leaflet")
{r setup, include=FALSE}
---
title: "Project 1- Map with Leaflet"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
install.packages("leaflet")
# to install the development version from Github, run
# devtools::install_github("rstudio/leaflet")
{r setup, include=FALSE}
library(leaflet)
````
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
install.packages("leaflet")
# to install the development version from Github, run
# devtools::install_github("rstudio/leaflet")
library(leaflet)
````
install.packages("leaflet")
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("leaflet")
# to install the development version from Github, run
# devtools::install_github("rstudio/leaflet")
library(leaflet)
```{r}
setwd("C:/DataScience course/Course 9 - Data Product")
```{r}
```{r}
```{r}
```{r}
install.packages('ggplot2');
library(ggplot2);
if (!require('ggplot2'))
{
install.packages('ggplot2');
library(ggplot2);
}
if (!require('ggplot2'))
{
install.packages('ggplot2');
library(ggplot2);
}
```{r}
if (!require('ggplot2'))
{
install.packages('ggplot2');
library(ggplot2);
}
```
install.packages("ggplot2")
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
install.packages("leaflet")
# to install the development version from Github, run
# devtools::install_github("rstudio/leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
install.packages("knitr")
install.packages("devtools")
```{r}
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
```
library(shiny)
runApp('Week 1/shinySlider')
runApp('Week 1/shinySlider')
---
title: "Leaflet"
author: "Ashvini"
date: "February 25, 2017"
output: ioslides_presentation
---
```{r echo = FALSE}
library(leaflet)
my_map = leaflet() %>%
addTiles()
my_map
```
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
library(leaflet)
library(readr)
library(dplyr)
leaflet(options = leafletOptions(minZoom = 0, maxZoom = 18))
map = leaflet() %>% addTiles()
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
map = leaflet(df) %>% addTiles()
map %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
map %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('green'))
```
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
library(htmltools)
df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"
))
leaflet(df) %>% addTiles() %>%
addMarkers(~Long, ~Lat, popup = ~htmlEscape(Name))
```
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
###February 26, 2017
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
library(leaflet)
library(readr)
library(dplyr)
leaflet(options = leafletOptions(minZoom = 0, maxZoom = 18))
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=103.8175, lat=1.2738, popup="Mount Faber")
m  # Print the map
````
###February 26, 2017
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=103.8175, lat=1.2738, popup="Mount Faber")
m  # Print the map
```
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
library(htmltools)
library(leaflet)
library(readr)
library(dplyr)
df <- read.csv(textConnection(
"Name,Lat,Long
Mount Faber Park,1.2738,103.8175
Hort Park,1.2794,103.7977
Kent Ridge park,1.2839,103.7913
Southern Ridges, 1.2801, 103.8030
Telok Blangah Hill Park, 1.2785,103.8129"
))
leaflet(df) %>% addTiles() %>%
addMarkers(~Long, ~Lat, popup = ~htmlEscape(Name))
df
```
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
library(htmltools)
library(leaflet)
library(readr)
library(dplyr)
htmltools::htmlEscape
df <- read.csv(textConnection(
"Name,Lat,Long
Mount Faber Park,1.2738,103.8175
Hort Park,1.2794,103.7977
Kent Ridge park,1.2839,103.7913
Southern Ridges, 1.2801, 103.8030
Telok Blangah Hill Park, 1.2785,103.8129"
))
leaflet(df) %>% addTiles() %>%
addMarkers(~Long, ~Lat, popup = (~htmlEscape(Name), textsize=10px))
df
```
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
library(htmltools)
library(leaflet)
library(readr)
library(dplyr)
df <- read.csv(textConnection(
"Name,Lat,Long
Mount Faber Park,1.2738,103.8175
Hort Park,1.2794,103.7977
Kent Ridge park,1.2839,103.7913
Southern Ridges, 1.2801, 103.8030
Telok Blangah Hill Park, 1.2785,103.8129"
))
leaflet(df) %>% addTiles() %>%
addMarkers(~Long, ~Lat, popup = (~htmlEscape(Name) textsize=10px))
df
```
```{r,fig.height=5,fig.width=7,fig.align='center',echo=FALSE}
library(htmltools)
library(leaflet)
library(readr)
library(dplyr)
df <- read.csv(textConnection(
"Name,Lat,Long
Mount Faber Park,1.2738,103.8175
Hort Park,1.2794,103.7977
Kent Ridge park,1.2839,103.7913
Southern Ridges, 1.2801, 103.8030
Telok Blangah Hill Park, 1.2785,103.8129"
))
leaflet(df) %>% addTiles() %>%
addMarkers(~Long, ~Lat, label = ~htmlEscape(Name))
df
```
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x= wt, y = mpg,mode="markers")
plot_ly(mtcars, x = wt, y = mpg, mode="markers")
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode="markers")
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode="markers")
head(mtcars)
library("shiny", lib.loc="~/R/win-library/3.3")
install.packages("jsonlite")
library("rsconnect", lib.loc="~/R/win-library/3.3")
head(cars)
```{r}
```
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
library(plotly)
library(cars)
plot_ly(cars, x = ~speed, y = ~dist)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
```{r}
```{r diamonds}
knitr::opts_chunk$set(echo = FALSE)
```{r mtcars, echo = TRUE}
```{r mtcars, echo = TRUE}
summary(mtcars)
dim(mtcars)
install.packages("tracer")
```{r, echo=FALSE,warning=FALSE,message=FALSE}
```{r, echo=FALSE,warning=FALSE,message=FALSE}
```{r mtcars, echo = TRUE}
head(mtcars)
```
shiny::runApp('Project3/Project3/Cars')
shiny::runApp('BMI')
